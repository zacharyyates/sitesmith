#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YatesMorrison.SiteSmith.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SiteSmith.Application")]
	public partial class SiteSmithDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertWishListItem(WishListItem instance);
    partial void UpdateWishListItem(WishListItem instance);
    partial void DeleteWishListItem(WishListItem instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCustomerFriend(CustomerFriend instance);
    partial void UpdateCustomerFriend(CustomerFriend instance);
    partial void DeleteCustomerFriend(CustomerFriend instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertFeedbackFlag(FeedbackFlag instance);
    partial void UpdateFeedbackFlag(FeedbackFlag instance);
    partial void DeleteFeedbackFlag(FeedbackFlag instance);
    partial void InsertManufacturer(Manufacturer instance);
    partial void UpdateManufacturer(Manufacturer instance);
    partial void DeleteManufacturer(Manufacturer instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderItem(OrderItem instance);
    partial void UpdateOrderItem(OrderItem instance);
    partial void DeleteOrderItem(OrderItem instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductAttribute(ProductAttribute instance);
    partial void UpdateProductAttribute(ProductAttribute instance);
    partial void DeleteProductAttribute(ProductAttribute instance);
    partial void InsertProductMedia(ProductMedia instance);
    partial void UpdateProductMedia(ProductMedia instance);
    partial void DeleteProductMedia(ProductMedia instance);
    partial void InsertProductPermutation(ProductPermutation instance);
    partial void UpdateProductPermutation(ProductPermutation instance);
    partial void DeleteProductPermutation(ProductPermutation instance);
    partial void InsertProductReview(ProductReview instance);
    partial void UpdateProductReview(ProductReview instance);
    partial void DeleteProductReview(ProductReview instance);
    partial void InsertProductTag(ProductTag instance);
    partial void UpdateProductTag(ProductTag instance);
    partial void DeleteProductTag(ProductTag instance);
    partial void InsertShipment(Shipment instance);
    partial void UpdateShipment(Shipment instance);
    partial void DeleteShipment(Shipment instance);
    partial void InsertShipmentItem(ShipmentItem instance);
    partial void UpdateShipmentItem(ShipmentItem instance);
    partial void DeleteShipmentItem(ShipmentItem instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertVote(Vote instance);
    partial void UpdateVote(Vote instance);
    partial void DeleteVote(Vote instance);
    partial void InsertWishList(WishList instance);
    partial void UpdateWishList(WishList instance);
    partial void DeleteWishList(WishList instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertMedia(Media instance);
    partial void UpdateMedia(Media instance);
    partial void DeleteMedia(Media instance);
    #endregion
		
		public SiteSmithDataContext() : 
				base(global::YatesMorrison.SiteSmith.Data.Properties.Settings.Default.SiteSmith_ApplicationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SiteSmithDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteSmithDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteSmithDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteSmithDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<WishListItem> WishListItems
		{
			get
			{
				return this.GetTable<WishListItem>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<CustomerFriend> CustomerFriends
		{
			get
			{
				return this.GetTable<CustomerFriend>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<FeedbackFlag> FeedbackFlags
		{
			get
			{
				return this.GetTable<FeedbackFlag>();
			}
		}
		
		public System.Data.Linq.Table<Manufacturer> Manufacturers
		{
			get
			{
				return this.GetTable<Manufacturer>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderItem> OrderItems
		{
			get
			{
				return this.GetTable<OrderItem>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductAttribute> ProductAttributes
		{
			get
			{
				return this.GetTable<ProductAttribute>();
			}
		}
		
		public System.Data.Linq.Table<ProductMedia> ProductMedias
		{
			get
			{
				return this.GetTable<ProductMedia>();
			}
		}
		
		public System.Data.Linq.Table<ProductPermutation> ProductPermutations
		{
			get
			{
				return this.GetTable<ProductPermutation>();
			}
		}
		
		public System.Data.Linq.Table<ProductReview> ProductReviews
		{
			get
			{
				return this.GetTable<ProductReview>();
			}
		}
		
		public System.Data.Linq.Table<ProductTag> ProductTags
		{
			get
			{
				return this.GetTable<ProductTag>();
			}
		}
		
		public System.Data.Linq.Table<Shipment> Shipments
		{
			get
			{
				return this.GetTable<Shipment>();
			}
		}
		
		public System.Data.Linq.Table<ShipmentItem> ShipmentItems
		{
			get
			{
				return this.GetTable<ShipmentItem>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Vote> Votes
		{
			get
			{
				return this.GetTable<Vote>();
			}
		}
		
		public System.Data.Linq.Table<WishList> WishLists
		{
			get
			{
				return this.GetTable<WishList>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Media> Medias
		{
			get
			{
				return this.GetTable<Media>();
			}
		}
	}
	
	[Table(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AccountId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private System.Nullable<bool> _IsEnabled;
		
		private System.Nullable<byte> _Restriction;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(System.Guid value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    partial void OnIsEnabledChanging(System.Nullable<bool> value);
    partial void OnIsEnabledChanged();
    partial void OnRestrictionChanging(System.Nullable<byte> value);
    partial void OnRestrictionChanged();
    #endregion
		
		public Account()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[Column(Storage="_AccountId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit")]
		public System.Nullable<bool> IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_Restriction", DbType="TinyInt")]
		public System.Nullable<byte> Restriction
		{
			get
			{
				return this._Restriction;
			}
			set
			{
				if ((this._Restriction != value))
				{
					this.OnRestrictionChanging(value);
					this.SendPropertyChanging();
					this._Restriction = value;
					this.SendPropertyChanged("Restriction");
					this.OnRestrictionChanged();
				}
			}
		}
		
		[Association(Name="Account_Customer", Storage="_Customers", OtherKey="AccountIdFk")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[Table(Name="dbo.WishListItem")]
	public partial class WishListItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WishListIdFk;
		
		private System.Guid _ProductPermutationIdFk;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
		private EntityRef<WishList> _WishList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWishListIdFkChanging(System.Guid value);
    partial void OnWishListIdFkChanged();
    partial void OnProductPermutationIdFkChanging(System.Guid value);
    partial void OnProductPermutationIdFkChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public WishListItem()
		{
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			this._WishList = default(EntityRef<WishList>);
			OnCreated();
		}
		
		[Column(Storage="_WishListIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WishListIdFk
		{
			get
			{
				return this._WishListIdFk;
			}
			set
			{
				if ((this._WishListIdFk != value))
				{
					if (this._WishList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWishListIdFkChanging(value);
					this.SendPropertyChanging();
					this._WishListIdFk = value;
					this.SendPropertyChanged("WishListIdFk");
					this.OnWishListIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_WishListItem", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.WishListItems.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.WishListItems.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		[Association(Name="WishList_WishListItem", Storage="_WishList", ThisKey="WishListIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WishList WishList
		{
			get
			{
				return this._WishList.Entity;
			}
			set
			{
				WishList previousValue = this._WishList.Entity;
				if (((previousValue != value) 
							|| (this._WishList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WishList.Entity = null;
						previousValue.WishListItems.Remove(this);
					}
					this._WishList.Entity = value;
					if ((value != null))
					{
						value.WishListItems.Add(this);
						this._WishListIdFk = value.WishListId;
					}
					else
					{
						this._WishListIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("WishList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private System.Nullable<System.Guid> _ContactIdFk;
		
		private string _Name;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private string _State;
		
		private string _PostalCode;
		
		private string _Country;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnContactIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnContactIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Address()
		{
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactIdFk
		{
			get
			{
				return this._ContactIdFk;
			}
			set
			{
				if ((this._ContactIdFk != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdFkChanging(value);
					this.SendPropertyChanging();
					this._ContactIdFk = value;
					this.SendPropertyChanged("ContactIdFk");
					this.OnContactIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Street1", DbType="NVarChar(MAX)")]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[Column(Storage="_Street2", DbType="NVarChar(MAX)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(MAX)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="NVarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(MAX)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Association(Name="Contact_Address", Storage="_Contact", ThisKey="ContactIdFk", IsForeignKey=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._ContactIdFk = value.ContactId;
					}
					else
					{
						this._ContactIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomerFriend")]
	public partial class CustomerFriend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomerIdFk;
		
		private System.Guid _FriendIdFk;
		
		private System.Nullable<bool> _IsBlocked;
		
		private EntityRef<Customer> _Customer1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdFkChanging(System.Guid value);
    partial void OnCustomerIdFkChanged();
    partial void OnFriendIdFkChanging(System.Guid value);
    partial void OnFriendIdFkChanged();
    partial void OnIsBlockedChanging(System.Nullable<bool> value);
    partial void OnIsBlockedChanged();
    #endregion
		
		public CustomerFriend()
		{
			this._Customer1 = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_FriendIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FriendIdFk
		{
			get
			{
				return this._FriendIdFk;
			}
			set
			{
				if ((this._FriendIdFk != value))
				{
					if (this._Customer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriendIdFkChanging(value);
					this.SendPropertyChanging();
					this._FriendIdFk = value;
					this.SendPropertyChanged("FriendIdFk");
					this.OnFriendIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_IsBlocked", DbType="Bit")]
		public System.Nullable<bool> IsBlocked
		{
			get
			{
				return this._IsBlocked;
			}
			set
			{
				if ((this._IsBlocked != value))
				{
					this.OnIsBlockedChanging(value);
					this.SendPropertyChanging();
					this._IsBlocked = value;
					this.SendPropertyChanged("IsBlocked");
					this.OnIsBlockedChanged();
				}
			}
		}
		
		[Association(Name="Customer_CustomerFriend", Storage="_Customer1", ThisKey="FriendIdFk", IsForeignKey=true)]
		public Customer Customer1
		{
			get
			{
				return this._Customer1.Entity;
			}
			set
			{
				Customer previousValue = this._Customer1.Entity;
				if (((previousValue != value) 
							|| (this._Customer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer1.Entity = null;
						previousValue.Friends.Remove(this);
					}
					this._Customer1.Entity = value;
					if ((value != null))
					{
						value.Friends.Add(this);
						this._FriendIdFk = value.CustomerId;
					}
					else
					{
						this._FriendIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Customer1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DepartmentId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(System.Guid value);
    partial void OnDepartmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Department()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Department_Product", Storage="_Products", OtherKey="DepartmentIdFk")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Discount")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DiscountId;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<decimal> _Value;
		
		private System.Nullable<byte> _Type;
		
		private System.Nullable<System.Guid> _ProductPermutationIdFk;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscountIdChanging(System.Guid value);
    partial void OnDiscountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnTypeChanging(System.Nullable<byte> value);
    partial void OnTypeChanged();
    partial void OnProductPermutationIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnProductPermutationIdFkChanged();
    #endregion
		
		public Discount()
		{
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			OnCreated();
		}
		
		[Column(Storage="_DiscountId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DiscountId
		{
			get
			{
				return this._DiscountId;
			}
			set
			{
				if ((this._DiscountId != value))
				{
					this.OnDiscountIdChanging(value);
					this.SendPropertyChanging();
					this._DiscountId = value;
					this.SendPropertyChanged("DiscountId");
					this.OnDiscountIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt")]
		public System.Nullable<byte> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_Discount", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true, DeleteRule="CASCADE")]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.Discounts.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.Discounts.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Feedback")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FeedbackId;
		
		private System.Guid _CustomerIdFk;
		
		private System.Nullable<bool> _IsFlagged;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private System.Nullable<bool> _IsVisible;
		
		private EntitySet<FeedbackFlag> _FeedbackFlags;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIdChanging(System.Guid value);
    partial void OnFeedbackIdChanged();
    partial void OnCustomerIdFkChanging(System.Guid value);
    partial void OnCustomerIdFkChanged();
    partial void OnIsFlaggedChanging(System.Nullable<bool> value);
    partial void OnIsFlaggedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    partial void OnIsVisibleChanging(System.Nullable<bool> value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public Feedback()
		{
			this._FeedbackFlags = new EntitySet<FeedbackFlag>(new Action<FeedbackFlag>(this.attach_FeedbackFlags), new Action<FeedbackFlag>(this.detach_FeedbackFlags));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_FeedbackId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FeedbackId
		{
			get
			{
				return this._FeedbackId;
			}
			set
			{
				if ((this._FeedbackId != value))
				{
					this.OnFeedbackIdChanging(value);
					this.SendPropertyChanging();
					this._FeedbackId = value;
					this.SendPropertyChanged("FeedbackId");
					this.OnFeedbackIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_IsFlagged", DbType="Bit")]
		public System.Nullable<bool> IsFlagged
		{
			get
			{
				return this._IsFlagged;
			}
			set
			{
				if ((this._IsFlagged != value))
				{
					this.OnIsFlaggedChanging(value);
					this.SendPropertyChanging();
					this._IsFlagged = value;
					this.SendPropertyChanged("IsFlagged");
					this.OnIsFlaggedChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisible", DbType="Bit")]
		public System.Nullable<bool> IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[Association(Name="Feedback_FeedbackFlag", Storage="_FeedbackFlags", OtherKey="FeedbackIdFk")]
		public EntitySet<FeedbackFlag> FeedbackFlags
		{
			get
			{
				return this._FeedbackFlags;
			}
			set
			{
				this._FeedbackFlags.Assign(value);
			}
		}
		
		[Association(Name="Customer_Feedback", Storage="_Customer", ThisKey="CustomerIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._CustomerIdFk = value.CustomerId;
					}
					else
					{
						this._CustomerIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeedbackFlags(FeedbackFlag entity)
		{
			this.SendPropertyChanging();
			entity.Feedback = this;
		}
		
		private void detach_FeedbackFlags(FeedbackFlag entity)
		{
			this.SendPropertyChanging();
			entity.Feedback = null;
		}
	}
	
	[Table(Name="dbo.FeedbackFlag")]
	public partial class FeedbackFlag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FeedbackFlagId;
		
		private System.Nullable<System.Guid> _FeedbackIdFk;
		
		private System.Nullable<System.Guid> _CustomerIdFk;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private System.Nullable<System.DateTime> _Responded;
		
		private string _Response;
		
		private EntityRef<Feedback> _Feedback;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackFlagIdChanging(System.Guid value);
    partial void OnFeedbackFlagIdChanged();
    partial void OnFeedbackIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnFeedbackIdFkChanged();
    partial void OnCustomerIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerIdFkChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    partial void OnRespondedChanging(System.Nullable<System.DateTime> value);
    partial void OnRespondedChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    #endregion
		
		public FeedbackFlag()
		{
			this._Feedback = default(EntityRef<Feedback>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_FeedbackFlagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FeedbackFlagId
		{
			get
			{
				return this._FeedbackFlagId;
			}
			set
			{
				if ((this._FeedbackFlagId != value))
				{
					this.OnFeedbackFlagIdChanging(value);
					this.SendPropertyChanging();
					this._FeedbackFlagId = value;
					this.SendPropertyChanged("FeedbackFlagId");
					this.OnFeedbackFlagIdChanged();
				}
			}
		}
		
		[Column(Storage="_FeedbackIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FeedbackIdFk
		{
			get
			{
				return this._FeedbackIdFk;
			}
			set
			{
				if ((this._FeedbackIdFk != value))
				{
					if (this._Feedback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedbackIdFkChanging(value);
					this.SendPropertyChanging();
					this._FeedbackIdFk = value;
					this.SendPropertyChanged("FeedbackIdFk");
					this.OnFeedbackIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Responded", DbType="DateTime")]
		public System.Nullable<System.DateTime> Responded
		{
			get
			{
				return this._Responded;
			}
			set
			{
				if ((this._Responded != value))
				{
					this.OnRespondedChanging(value);
					this.SendPropertyChanging();
					this._Responded = value;
					this.SendPropertyChanged("Responded");
					this.OnRespondedChanged();
				}
			}
		}
		
		[Column(Storage="_Response", DbType="NVarChar(MAX)")]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[Association(Name="Feedback_FeedbackFlag", Storage="_Feedback", ThisKey="FeedbackIdFk", IsForeignKey=true, DeleteRule="CASCADE")]
		public Feedback Feedback
		{
			get
			{
				return this._Feedback.Entity;
			}
			set
			{
				Feedback previousValue = this._Feedback.Entity;
				if (((previousValue != value) 
							|| (this._Feedback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feedback.Entity = null;
						previousValue.FeedbackFlags.Remove(this);
					}
					this._Feedback.Entity = value;
					if ((value != null))
					{
						value.FeedbackFlags.Add(this);
						this._FeedbackIdFk = value.FeedbackId;
					}
					else
					{
						this._FeedbackIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Feedback");
				}
			}
		}
		
		[Association(Name="Customer_FeedbackFlag", Storage="_Customer", ThisKey="CustomerIdFk", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.FeedbackFlags.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.FeedbackFlags.Add(this);
						this._CustomerIdFk = value.CustomerId;
					}
					else
					{
						this._CustomerIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Manufacturer")]
	public partial class Manufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ManufacturerIdFk;
		
		private System.Guid _ContactIdFk;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerIdFkChanging(System.Guid value);
    partial void OnManufacturerIdFkChanged();
    partial void OnContactIdFkChanging(System.Guid value);
    partial void OnContactIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Manufacturer()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_ManufacturerIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ManufacturerIdFk
		{
			get
			{
				return this._ManufacturerIdFk;
			}
			set
			{
				if ((this._ManufacturerIdFk != value))
				{
					this.OnManufacturerIdFkChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerIdFk = value;
					this.SendPropertyChanged("ManufacturerIdFk");
					this.OnManufacturerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_ContactIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContactIdFk
		{
			get
			{
				return this._ContactIdFk;
			}
			set
			{
				if ((this._ContactIdFk != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdFkChanging(value);
					this.SendPropertyChanging();
					this._ContactIdFk = value;
					this.SendPropertyChanged("ContactIdFk");
					this.OnContactIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Manufacturer_Product", Storage="_Products", OtherKey="ManufacturerIdFk")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="Contact_Manufacturer", Storage="_Contact", ThisKey="ContactIdFk", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Manufacturers.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Manufacturers.Add(this);
						this._ContactIdFk = value.ContactId;
					}
					else
					{
						this._ContactIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
	}
	
	[Table(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderId;
		
		private System.Guid _CustomerIdFk;
		
		private string _Identifier;
		
		private System.Nullable<System.DateTime> _Submitted;
		
		private System.Nullable<System.DateTime> _Completed;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<Shipment> _Shipments;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(System.Guid value);
    partial void OnOrderIdChanged();
    partial void OnCustomerIdFkChanging(System.Guid value);
    partial void OnCustomerIdFkChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnSubmittedChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmittedChanged();
    partial void OnCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedChanged();
    #endregion
		
		public Order()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Shipments = new EntitySet<Shipment>(new Action<Shipment>(this.attach_Shipments), new Action<Shipment>(this.detach_Shipments));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_OrderId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Identifier", DbType="NVarChar(MAX)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_Submitted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Submitted
		{
			get
			{
				return this._Submitted;
			}
			set
			{
				if ((this._Submitted != value))
				{
					this.OnSubmittedChanging(value);
					this.SendPropertyChanging();
					this._Submitted = value;
					this.SendPropertyChanged("Submitted");
					this.OnSubmittedChanged();
				}
			}
		}
		
		[Column(Storage="_Completed", DbType="DateTime")]
		public System.Nullable<System.DateTime> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderItem", Storage="_OrderItems", OtherKey="OrderIdFk")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[Association(Name="Order_Shipment", Storage="_Shipments", OtherKey="OrderIdFk")]
		public EntitySet<Shipment> Shipments
		{
			get
			{
				return this._Shipments;
			}
			set
			{
				this._Shipments.Assign(value);
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Customer", ThisKey="CustomerIdFk", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CustomerIdFk = value.CustomerId;
					}
					else
					{
						this._CustomerIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_Shipments(Shipment entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Shipments(Shipment entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.OrderItem")]
	public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderIdFk;
		
		private System.Guid _ProductPermutationIdFk;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdFkChanging(System.Guid value);
    partial void OnOrderIdFkChanged();
    partial void OnProductPermutationIdFkChanging(System.Guid value);
    partial void OnProductPermutationIdFkChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public OrderItem()
		{
			this._Order = default(EntityRef<Order>);
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			OnCreated();
		}
		
		[Column(Storage="_OrderIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderIdFk
		{
			get
			{
				return this._OrderIdFk;
			}
			set
			{
				if ((this._OrderIdFk != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdFkChanging(value);
					this.SendPropertyChanging();
					this._OrderIdFk = value;
					this.SendPropertyChanged("OrderIdFk");
					this.OnOrderIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderItem", Storage="_Order", ThisKey="OrderIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._OrderIdFk = value.OrderId;
					}
					else
					{
						this._OrderIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="ProductPermutation_OrderItem", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true)]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhoneId;
		
		private System.Guid _ContactIdFk;
		
		private string _Name;
		
		private string _Number;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIdChanging(System.Guid value);
    partial void OnPhoneIdChanged();
    partial void OnContactIdFkChanging(System.Guid value);
    partial void OnContactIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    #endregion
		
		public Phone()
		{
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_PhoneId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhoneId
		{
			get
			{
				return this._PhoneId;
			}
			set
			{
				if ((this._PhoneId != value))
				{
					this.OnPhoneIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneId = value;
					this.SendPropertyChanged("PhoneId");
					this.OnPhoneIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContactIdFk
		{
			get
			{
				return this._ContactIdFk;
			}
			set
			{
				if ((this._ContactIdFk != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdFkChanging(value);
					this.SendPropertyChanging();
					this._ContactIdFk = value;
					this.SendPropertyChanged("ContactIdFk");
					this.OnContactIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(15)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Association(Name="Contact_Phone", Storage="_Contact", ThisKey="ContactIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._ContactIdFk = value.ContactId;
					}
					else
					{
						this._ContactIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductPermutationIdFk;
		
		private string _Name;
		
		private System.Nullable<decimal> _Value;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductPermutationIdFkChanging(System.Guid value);
    partial void OnProductPermutationIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    #endregion
		
		public Price()
		{
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			OnCreated();
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_Price", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductId;
		
		private System.Nullable<System.Guid> _ManufacturerIdFk;
		
		private System.Nullable<System.Guid> _DepartmentIdFk;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Released;
		
		private System.Nullable<System.DateTime> _Discontinued;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private System.Nullable<byte> _DeliveryType;
		
		private EntitySet<ProductMedia> _ProductMedias;
		
		private EntitySet<ProductPermutation> _ProductPermutations;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntitySet<ProductTag> _ProductTags;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(System.Guid value);
    partial void OnProductIdChanged();
    partial void OnManufacturerIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnManufacturerIdFkChanged();
    partial void OnDepartmentIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReleasedChanging(System.Nullable<System.DateTime> value);
    partial void OnReleasedChanged();
    partial void OnDiscontinuedChanging(System.Nullable<System.DateTime> value);
    partial void OnDiscontinuedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    partial void OnDeliveryTypeChanging(System.Nullable<byte> value);
    partial void OnDeliveryTypeChanged();
    #endregion
		
		public Product()
		{
			this._ProductMedias = new EntitySet<ProductMedia>(new Action<ProductMedia>(this.attach_ProductMedias), new Action<ProductMedia>(this.detach_ProductMedias));
			this._ProductPermutations = new EntitySet<ProductPermutation>(new Action<ProductPermutation>(this.attach_ProductPermutations), new Action<ProductPermutation>(this.detach_ProductPermutations));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._ProductTags = new EntitySet<ProductTag>(new Action<ProductTag>(this.attach_ProductTags), new Action<ProductTag>(this.detach_ProductTags));
			this._Department = default(EntityRef<Department>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			OnCreated();
		}
		
		[Column(Storage="_ProductId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManufacturerIdFk
		{
			get
			{
				return this._ManufacturerIdFk;
			}
			set
			{
				if ((this._ManufacturerIdFk != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIdFkChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerIdFk = value;
					this.SendPropertyChanged("ManufacturerIdFk");
					this.OnManufacturerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentIdFk
		{
			get
			{
				return this._DepartmentIdFk;
			}
			set
			{
				if ((this._DepartmentIdFk != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdFkChanging(value);
					this.SendPropertyChanging();
					this._DepartmentIdFk = value;
					this.SendPropertyChanged("DepartmentIdFk");
					this.OnDepartmentIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Released", DbType="DateTime")]
		public System.Nullable<System.DateTime> Released
		{
			get
			{
				return this._Released;
			}
			set
			{
				if ((this._Released != value))
				{
					this.OnReleasedChanging(value);
					this.SendPropertyChanging();
					this._Released = value;
					this.SendPropertyChanged("Released");
					this.OnReleasedChanged();
				}
			}
		}
		
		[Column(Storage="_Discontinued", DbType="DateTime")]
		public System.Nullable<System.DateTime> Discontinued
		{
			get
			{
				return this._Discontinued;
			}
			set
			{
				if ((this._Discontinued != value))
				{
					this.OnDiscontinuedChanging(value);
					this.SendPropertyChanging();
					this._Discontinued = value;
					this.SendPropertyChanged("Discontinued");
					this.OnDiscontinuedChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryType", DbType="TinyInt")]
		public System.Nullable<byte> DeliveryType
		{
			get
			{
				return this._DeliveryType;
			}
			set
			{
				if ((this._DeliveryType != value))
				{
					this.OnDeliveryTypeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryType = value;
					this.SendPropertyChanged("DeliveryType");
					this.OnDeliveryTypeChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductMedia", Storage="_ProductMedias", OtherKey="ProductIdFk")]
		public EntitySet<ProductMedia> ProductMedias
		{
			get
			{
				return this._ProductMedias;
			}
			set
			{
				this._ProductMedias.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductPermutation", Storage="_ProductPermutations", OtherKey="ProductIdFk")]
		public EntitySet<ProductPermutation> ProductPermutations
		{
			get
			{
				return this._ProductPermutations;
			}
			set
			{
				this._ProductPermutations.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductReview", Storage="_ProductReviews", OtherKey="ProductIdFk")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductTag", Storage="_ProductTags", OtherKey="ProductIdFk")]
		public EntitySet<ProductTag> ProductTags
		{
			get
			{
				return this._ProductTags;
			}
			set
			{
				this._ProductTags.Assign(value);
			}
		}
		
		[Association(Name="Department_Product", Storage="_Department", ThisKey="DepartmentIdFk", IsForeignKey=true, DeleteRule="SET NULL")]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._DepartmentIdFk = value.DepartmentId;
					}
					else
					{
						this._DepartmentIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="Manufacturer_Product", Storage="_Manufacturer", ThisKey="ManufacturerIdFk", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ManufacturerIdFk = value.ManufacturerIdFk;
					}
					else
					{
						this._ManufacturerIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductMedias(ProductMedia entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductMedias(ProductMedia entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductPermutations(ProductPermutation entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductPermutations(ProductPermutation entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.ProductAttribute")]
	public partial class ProductAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductPermutationIdFk;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductPermutationIdFkChanging(System.Guid value);
    partial void OnProductPermutationIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ProductAttribute()
		{
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			OnCreated();
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_ProductAttribute", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.ProductAttributes.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.ProductAttributes.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductMedia")]
	public partial class ProductMedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductIdFk;
		
		private System.Guid _MediaIdFk;
		
		private System.Nullable<bool> _IsVisible;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Media> _Media;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdFkChanging(System.Guid value);
    partial void OnProductIdFkChanged();
    partial void OnMediaIdFkChanging(System.Guid value);
    partial void OnMediaIdFkChanged();
    partial void OnIsVisibleChanging(System.Nullable<bool> value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public ProductMedia()
		{
			this._Product = default(EntityRef<Product>);
			this._Media = default(EntityRef<Media>);
			OnCreated();
		}
		
		[Column(Storage="_ProductIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductIdFk
		{
			get
			{
				return this._ProductIdFk;
			}
			set
			{
				if ((this._ProductIdFk != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductIdFk = value;
					this.SendPropertyChanged("ProductIdFk");
					this.OnProductIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_MediaIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MediaIdFk
		{
			get
			{
				return this._MediaIdFk;
			}
			set
			{
				if ((this._MediaIdFk != value))
				{
					if (this._Media.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaIdFkChanging(value);
					this.SendPropertyChanging();
					this._MediaIdFk = value;
					this.SendPropertyChanged("MediaIdFk");
					this.OnMediaIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisible", DbType="Bit")]
		public System.Nullable<bool> IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductMedia", Storage="_Product", ThisKey="ProductIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductMedias.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductMedias.Add(this);
						this._ProductIdFk = value.ProductId;
					}
					else
					{
						this._ProductIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Media_ProductMedia", Storage="_Media", ThisKey="MediaIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Media Media
		{
			get
			{
				return this._Media.Entity;
			}
			set
			{
				Media previousValue = this._Media.Entity;
				if (((previousValue != value) 
							|| (this._Media.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media.Entity = null;
						previousValue.ProductMedias.Remove(this);
					}
					this._Media.Entity = value;
					if ((value != null))
					{
						value.ProductMedias.Add(this);
						this._MediaIdFk = value.MediaId;
					}
					else
					{
						this._MediaIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Media");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductPermutation")]
	public partial class ProductPermutation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductPermutationId;
		
		private System.Guid _ProductIdFk;
		
		private string _Identifier;
		
		private System.Nullable<decimal> _MSRP;
		
		private System.Nullable<decimal> _MAP;
		
		private System.Nullable<bool> _IsVisible;
		
		private System.Nullable<bool> _IsAvailable;
		
		private EntitySet<WishListItem> _WishListItems;
		
		private EntitySet<Discount> _Discounts;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<Price> _Prices;
		
		private EntitySet<ProductAttribute> _ProductAttributes;
		
		private EntitySet<ShipmentItem> _ShipmentItems;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductPermutationIdChanging(System.Guid value);
    partial void OnProductPermutationIdChanged();
    partial void OnProductIdFkChanging(System.Guid value);
    partial void OnProductIdFkChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnMSRPChanging(System.Nullable<decimal> value);
    partial void OnMSRPChanged();
    partial void OnMAPChanging(System.Nullable<decimal> value);
    partial void OnMAPChanged();
    partial void OnIsVisibleChanging(System.Nullable<bool> value);
    partial void OnIsVisibleChanged();
    partial void OnIsAvailableChanging(System.Nullable<bool> value);
    partial void OnIsAvailableChanged();
    #endregion
		
		public ProductPermutation()
		{
			this._WishListItems = new EntitySet<WishListItem>(new Action<WishListItem>(this.attach_WishListItems), new Action<WishListItem>(this.detach_WishListItems));
			this._Discounts = new EntitySet<Discount>(new Action<Discount>(this.attach_Discounts), new Action<Discount>(this.detach_Discounts));
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._ProductAttributes = new EntitySet<ProductAttribute>(new Action<ProductAttribute>(this.attach_ProductAttributes), new Action<ProductAttribute>(this.detach_ProductAttributes));
			this._ShipmentItems = new EntitySet<ShipmentItem>(new Action<ShipmentItem>(this.attach_ShipmentItems), new Action<ShipmentItem>(this.detach_ShipmentItems));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductPermutationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationId
		{
			get
			{
				return this._ProductPermutationId;
			}
			set
			{
				if ((this._ProductPermutationId != value))
				{
					this.OnProductPermutationIdChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationId = value;
					this.SendPropertyChanged("ProductPermutationId");
					this.OnProductPermutationIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProductIdFk
		{
			get
			{
				return this._ProductIdFk;
			}
			set
			{
				if ((this._ProductIdFk != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductIdFk = value;
					this.SendPropertyChanged("ProductIdFk");
					this.OnProductIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Identifier", DbType="NVarChar(MAX)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_MSRP", DbType="Money")]
		public System.Nullable<decimal> MSRP
		{
			get
			{
				return this._MSRP;
			}
			set
			{
				if ((this._MSRP != value))
				{
					this.OnMSRPChanging(value);
					this.SendPropertyChanging();
					this._MSRP = value;
					this.SendPropertyChanged("MSRP");
					this.OnMSRPChanged();
				}
			}
		}
		
		[Column(Storage="_MAP", DbType="Money")]
		public System.Nullable<decimal> MAP
		{
			get
			{
				return this._MAP;
			}
			set
			{
				if ((this._MAP != value))
				{
					this.OnMAPChanging(value);
					this.SendPropertyChanging();
					this._MAP = value;
					this.SendPropertyChanged("MAP");
					this.OnMAPChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisible", DbType="Bit")]
		public System.Nullable<bool> IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_IsAvailable", DbType="Bit")]
		public System.Nullable<bool> IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_WishListItem", Storage="_WishListItems", OtherKey="ProductPermutationIdFk")]
		public EntitySet<WishListItem> WishListItems
		{
			get
			{
				return this._WishListItems;
			}
			set
			{
				this._WishListItems.Assign(value);
			}
		}
		
		[Association(Name="ProductPermutation_Discount", Storage="_Discounts", OtherKey="ProductPermutationIdFk")]
		public EntitySet<Discount> Discounts
		{
			get
			{
				return this._Discounts;
			}
			set
			{
				this._Discounts.Assign(value);
			}
		}
		
		[Association(Name="ProductPermutation_OrderItem", Storage="_OrderItems", OtherKey="ProductPermutationIdFk")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[Association(Name="ProductPermutation_Price", Storage="_Prices", OtherKey="ProductPermutationIdFk")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[Association(Name="ProductPermutation_ProductAttribute", Storage="_ProductAttributes", OtherKey="ProductPermutationIdFk")]
		public EntitySet<ProductAttribute> ProductAttributes
		{
			get
			{
				return this._ProductAttributes;
			}
			set
			{
				this._ProductAttributes.Assign(value);
			}
		}
		
		[Association(Name="ProductPermutation_ShipmentItem", Storage="_ShipmentItems", OtherKey="ProductPermutationIdFk")]
		public EntitySet<ShipmentItem> ShipmentItems
		{
			get
			{
				return this._ShipmentItems;
			}
			set
			{
				this._ShipmentItems.Assign(value);
			}
		}
		
		[Association(Name="ProductPermutation_Stock", Storage="_Stocks", OtherKey="ProductPermutationIdFk")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductPermutation", Storage="_Product", ThisKey="ProductIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductPermutations.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductPermutations.Add(this);
						this._ProductIdFk = value.ProductId;
					}
					else
					{
						this._ProductIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WishListItems(WishListItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_WishListItems(WishListItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
		
		private void attach_Discounts(Discount entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_Discounts(Discount entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
		
		private void attach_ProductAttributes(ProductAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_ProductAttributes(ProductAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
		
		private void attach_ShipmentItems(ShipmentItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_ShipmentItems(ShipmentItem entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.ProductPermutation = null;
		}
	}
	
	[Table(Name="dbo.ProductReview")]
	public partial class ProductReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductIdFk;
		
		private System.Guid _CustomerIdFk;
		
		private System.Nullable<System.Guid> _FeedbackIdFk;
		
		private string _Description;
		
		private System.Nullable<byte> _Rating;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdFkChanging(System.Guid value);
    partial void OnProductIdFkChanged();
    partial void OnCustomerIdFkChanging(System.Guid value);
    partial void OnCustomerIdFkChanged();
    partial void OnFeedbackIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnFeedbackIdFkChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRatingChanging(System.Nullable<byte> value);
    partial void OnRatingChanged();
    #endregion
		
		public ProductReview()
		{
			this._Product = default(EntityRef<Product>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_ProductIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductIdFk
		{
			get
			{
				return this._ProductIdFk;
			}
			set
			{
				if ((this._ProductIdFk != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductIdFk = value;
					this.SendPropertyChanged("ProductIdFk");
					this.OnProductIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_FeedbackIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FeedbackIdFk
		{
			get
			{
				return this._FeedbackIdFk;
			}
			set
			{
				if ((this._FeedbackIdFk != value))
				{
					this.OnFeedbackIdFkChanging(value);
					this.SendPropertyChanging();
					this._FeedbackIdFk = value;
					this.SendPropertyChanged("FeedbackIdFk");
					this.OnFeedbackIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="TinyInt")]
		public System.Nullable<byte> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductReview", Storage="_Product", ThisKey="ProductIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._ProductIdFk = value.ProductId;
					}
					else
					{
						this._ProductIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Customer_ProductReview", Storage="_Customer", ThisKey="CustomerIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._CustomerIdFk = value.CustomerId;
					}
					else
					{
						this._CustomerIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductTag")]
	public partial class ProductTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductIdFk;
		
		private System.Guid _TagIdFk;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdFkChanging(System.Guid value);
    partial void OnProductIdFkChanged();
    partial void OnTagIdFkChanging(System.Guid value);
    partial void OnTagIdFkChanged();
    #endregion
		
		public ProductTag()
		{
			this._Product = default(EntityRef<Product>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[Column(Storage="_ProductIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductIdFk
		{
			get
			{
				return this._ProductIdFk;
			}
			set
			{
				if ((this._ProductIdFk != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductIdFk = value;
					this.SendPropertyChanged("ProductIdFk");
					this.OnProductIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_TagIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TagIdFk
		{
			get
			{
				return this._TagIdFk;
			}
			set
			{
				if ((this._TagIdFk != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdFkChanging(value);
					this.SendPropertyChanging();
					this._TagIdFk = value;
					this.SendPropertyChanged("TagIdFk");
					this.OnTagIdFkChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductTag", Storage="_Product", ThisKey="ProductIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductTags.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductTags.Add(this);
						this._ProductIdFk = value.ProductId;
					}
					else
					{
						this._ProductIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Tag_ProductTag", Storage="_Tag", ThisKey="TagIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.ProductTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.ProductTags.Add(this);
						this._TagIdFk = value.TagId;
					}
					else
					{
						this._TagIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Shipment")]
	public partial class Shipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ShipmentId;
		
		private System.Nullable<System.Guid> _OrderIdFk;
		
		private string _Identifier;
		
		private System.Nullable<System.DateTime> _Processed;
		
		private System.Nullable<System.DateTime> _Filled;
		
		private System.Nullable<System.DateTime> _Shipped;
		
		private EntitySet<ShipmentItem> _ShipmentItems;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipmentIdChanging(System.Guid value);
    partial void OnShipmentIdChanged();
    partial void OnOrderIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnOrderIdFkChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnProcessedChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessedChanged();
    partial void OnFilledChanging(System.Nullable<System.DateTime> value);
    partial void OnFilledChanged();
    partial void OnShippedChanging(System.Nullable<System.DateTime> value);
    partial void OnShippedChanged();
    #endregion
		
		public Shipment()
		{
			this._ShipmentItems = new EntitySet<ShipmentItem>(new Action<ShipmentItem>(this.attach_ShipmentItems), new Action<ShipmentItem>(this.detach_ShipmentItems));
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_ShipmentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ShipmentId
		{
			get
			{
				return this._ShipmentId;
			}
			set
			{
				if ((this._ShipmentId != value))
				{
					this.OnShipmentIdChanging(value);
					this.SendPropertyChanging();
					this._ShipmentId = value;
					this.SendPropertyChanged("ShipmentId");
					this.OnShipmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderIdFk
		{
			get
			{
				return this._OrderIdFk;
			}
			set
			{
				if ((this._OrderIdFk != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdFkChanging(value);
					this.SendPropertyChanging();
					this._OrderIdFk = value;
					this.SendPropertyChanged("OrderIdFk");
					this.OnOrderIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Identifier", DbType="NVarChar(MAX)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_Processed", DbType="DateTime")]
		public System.Nullable<System.DateTime> Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		[Column(Storage="_Filled", DbType="DateTime")]
		public System.Nullable<System.DateTime> Filled
		{
			get
			{
				return this._Filled;
			}
			set
			{
				if ((this._Filled != value))
				{
					this.OnFilledChanging(value);
					this.SendPropertyChanging();
					this._Filled = value;
					this.SendPropertyChanged("Filled");
					this.OnFilledChanged();
				}
			}
		}
		
		[Column(Storage="_Shipped", DbType="DateTime")]
		public System.Nullable<System.DateTime> Shipped
		{
			get
			{
				return this._Shipped;
			}
			set
			{
				if ((this._Shipped != value))
				{
					this.OnShippedChanging(value);
					this.SendPropertyChanging();
					this._Shipped = value;
					this.SendPropertyChanged("Shipped");
					this.OnShippedChanged();
				}
			}
		}
		
		[Association(Name="Shipment_ShipmentItem", Storage="_ShipmentItems", OtherKey="ShipmentIdFk")]
		public EntitySet<ShipmentItem> ShipmentItems
		{
			get
			{
				return this._ShipmentItems;
			}
			set
			{
				this._ShipmentItems.Assign(value);
			}
		}
		
		[Association(Name="Order_Shipment", Storage="_Order", ThisKey="OrderIdFk", IsForeignKey=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Shipments.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Shipments.Add(this);
						this._OrderIdFk = value.OrderId;
					}
					else
					{
						this._OrderIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShipmentItems(ShipmentItem entity)
		{
			this.SendPropertyChanging();
			entity.Shipment = this;
		}
		
		private void detach_ShipmentItems(ShipmentItem entity)
		{
			this.SendPropertyChanging();
			entity.Shipment = null;
		}
	}
	
	[Table(Name="dbo.ShipmentItem")]
	public partial class ShipmentItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ShipmentIdFk;
		
		private System.Guid _ProductPermutationIdFk;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
		private EntityRef<Shipment> _Shipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipmentIdFkChanging(System.Guid value);
    partial void OnShipmentIdFkChanged();
    partial void OnProductPermutationIdFkChanging(System.Guid value);
    partial void OnProductPermutationIdFkChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public ShipmentItem()
		{
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			this._Shipment = default(EntityRef<Shipment>);
			OnCreated();
		}
		
		[Column(Storage="_ShipmentIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ShipmentIdFk
		{
			get
			{
				return this._ShipmentIdFk;
			}
			set
			{
				if ((this._ShipmentIdFk != value))
				{
					if (this._Shipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipmentIdFkChanging(value);
					this.SendPropertyChanging();
					this._ShipmentIdFk = value;
					this.SendPropertyChanged("ShipmentIdFk");
					this.OnShipmentIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_ShipmentItem", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true)]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.ShipmentItems.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.ShipmentItems.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		[Association(Name="Shipment_ShipmentItem", Storage="_Shipment", ThisKey="ShipmentIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shipment Shipment
		{
			get
			{
				return this._Shipment.Entity;
			}
			set
			{
				Shipment previousValue = this._Shipment.Entity;
				if (((previousValue != value) 
							|| (this._Shipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shipment.Entity = null;
						previousValue.ShipmentItems.Remove(this);
					}
					this._Shipment.Entity = value;
					if ((value != null))
					{
						value.ShipmentItems.Add(this);
						this._ShipmentIdFk = value.ShipmentId;
					}
					else
					{
						this._ShipmentIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Shipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductPermutationIdFk;
		
		private System.Guid _DistributionCenterIdFk;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<byte> _Status;
		
		private EntityRef<ProductPermutation> _ProductPermutation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductPermutationIdFkChanging(System.Guid value);
    partial void OnProductPermutationIdFkChanged();
    partial void OnDistributionCenterIdFkChanging(System.Guid value);
    partial void OnDistributionCenterIdFkChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnStatusChanging(System.Nullable<byte> value);
    partial void OnStatusChanged();
    #endregion
		
		public Stock()
		{
			this._ProductPermutation = default(EntityRef<ProductPermutation>);
			OnCreated();
		}
		
		[Column(Storage="_ProductPermutationIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductPermutationIdFk
		{
			get
			{
				return this._ProductPermutationIdFk;
			}
			set
			{
				if ((this._ProductPermutationIdFk != value))
				{
					if (this._ProductPermutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductPermutationIdFkChanging(value);
					this.SendPropertyChanging();
					this._ProductPermutationIdFk = value;
					this.SendPropertyChanged("ProductPermutationIdFk");
					this.OnProductPermutationIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_DistributionCenterIdFk", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DistributionCenterIdFk
		{
			get
			{
				return this._DistributionCenterIdFk;
			}
			set
			{
				if ((this._DistributionCenterIdFk != value))
				{
					this.OnDistributionCenterIdFkChanging(value);
					this.SendPropertyChanging();
					this._DistributionCenterIdFk = value;
					this.SendPropertyChanged("DistributionCenterIdFk");
					this.OnDistributionCenterIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt")]
		public System.Nullable<byte> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="ProductPermutation_Stock", Storage="_ProductPermutation", ThisKey="ProductPermutationIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProductPermutation ProductPermutation
		{
			get
			{
				return this._ProductPermutation.Entity;
			}
			set
			{
				ProductPermutation previousValue = this._ProductPermutation.Entity;
				if (((previousValue != value) 
							|| (this._ProductPermutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPermutation.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._ProductPermutation.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._ProductPermutationIdFk = value.ProductPermutationId;
					}
					else
					{
						this._ProductPermutationIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("ProductPermutation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TagId;
		
		private string _Name;
		
		private EntitySet<ProductTag> _ProductTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(System.Guid value);
    partial void OnTagIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tag()
		{
			this._ProductTags = new EntitySet<ProductTag>(new Action<ProductTag>(this.attach_ProductTags), new Action<ProductTag>(this.detach_ProductTags));
			OnCreated();
		}
		
		[Column(Storage="_TagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Tag_ProductTag", Storage="_ProductTags", OtherKey="TagIdFk")]
		public EntitySet<ProductTag> ProductTags
		{
			get
			{
				return this._ProductTags;
			}
			set
			{
				this._ProductTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_ProductTags(ProductTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[Table(Name="dbo.Vote")]
	public partial class Vote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VoteId;
		
		private System.Nullable<System.Guid> _CustomerIdFk;
		
		private System.Nullable<System.DateTime> _Voted;
		
		private System.Nullable<bool> _IsUp;
		
		private string _Reason;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoteIdChanging(System.Guid value);
    partial void OnVoteIdChanged();
    partial void OnCustomerIdFkChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerIdFkChanged();
    partial void OnVotedChanging(System.Nullable<System.DateTime> value);
    partial void OnVotedChanged();
    partial void OnIsUpChanging(System.Nullable<bool> value);
    partial void OnIsUpChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public Vote()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_VoteId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VoteId
		{
			get
			{
				return this._VoteId;
			}
			set
			{
				if ((this._VoteId != value))
				{
					this.OnVoteIdChanging(value);
					this.SendPropertyChanging();
					this._VoteId = value;
					this.SendPropertyChanged("VoteId");
					this.OnVoteIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Voted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Voted
		{
			get
			{
				return this._Voted;
			}
			set
			{
				if ((this._Voted != value))
				{
					this.OnVotedChanging(value);
					this.SendPropertyChanging();
					this._Voted = value;
					this.SendPropertyChanged("Voted");
					this.OnVotedChanged();
				}
			}
		}
		
		[Column(Storage="_IsUp", DbType="Bit")]
		public System.Nullable<bool> IsUp
		{
			get
			{
				return this._IsUp;
			}
			set
			{
				if ((this._IsUp != value))
				{
					this.OnIsUpChanging(value);
					this.SendPropertyChanging();
					this._IsUp = value;
					this.SendPropertyChanged("IsUp");
					this.OnIsUpChanged();
				}
			}
		}
		
		[Column(Storage="_Reason", DbType="NVarChar(MAX)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[Association(Name="Customer_Vote", Storage="_Customer", ThisKey="CustomerIdFk", IsForeignKey=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Votes.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Votes.Add(this);
						this._CustomerIdFk = value.CustomerId;
					}
					else
					{
						this._CustomerIdFk = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WishList")]
	public partial class WishList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WishListId;
		
		private System.Guid _CustomerIdFk;
		
		private string _Name;
		
		private System.Nullable<bool> _IsPublic;
		
		private System.Nullable<System.DateTime> _Expires;
		
		private EntitySet<WishListItem> _WishListItems;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWishListIdChanging(System.Guid value);
    partial void OnWishListIdChanged();
    partial void OnCustomerIdFkChanging(System.Guid value);
    partial void OnCustomerIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsPublicChanging(System.Nullable<bool> value);
    partial void OnIsPublicChanged();
    partial void OnExpiresChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiresChanged();
    #endregion
		
		public WishList()
		{
			this._WishListItems = new EntitySet<WishListItem>(new Action<WishListItem>(this.attach_WishListItems), new Action<WishListItem>(this.detach_WishListItems));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_WishListId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WishListId
		{
			get
			{
				return this._WishListId;
			}
			set
			{
				if ((this._WishListId != value))
				{
					this.OnWishListIdChanging(value);
					this.SendPropertyChanging();
					this._WishListId = value;
					this.SendPropertyChanged("WishListId");
					this.OnWishListIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerIdFk
		{
			get
			{
				return this._CustomerIdFk;
			}
			set
			{
				if ((this._CustomerIdFk != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdFkChanging(value);
					this.SendPropertyChanging();
					this._CustomerIdFk = value;
					this.SendPropertyChanged("CustomerIdFk");
					this.OnCustomerIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublic", DbType="Bit")]
		public System.Nullable<bool> IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[Column(Storage="_Expires", DbType="DateTime")]
		public System.Nullable<System.DateTime> Expires
		{
			get
			{
				return this._Expires;
			}
			set
			{
				if ((this._Expires != value))
				{
					this.OnExpiresChanging(value);
					this.SendPropertyChanging();
					this._Expires = value;
					this.SendPropertyChanged("Expires");
					this.OnExpiresChanged();
				}
			}
		}
		
		[Association(Name="WishList_WishListItem", Storage="_WishListItems", OtherKey="WishListIdFk")]
		public EntitySet<WishListItem> WishListItems
		{
			get
			{
				return this._WishListItems;
			}
			set
			{
				this._WishListItems.Assign(value);
			}
		}
		
		[Association(Name="Customer_WishList", Storage="_Customer", ThisKey="CustomerIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.WishLists.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.WishLists.Add(this);
						this._CustomerIdFk = value.CustomerId;
					}
					else
					{
						this._CustomerIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WishListItems(WishListItem entity)
		{
			this.SendPropertyChanging();
			entity.WishList = this;
		}
		
		private void detach_WishListItems(WishListItem entity)
		{
			this.SendPropertyChanging();
			entity.WishList = null;
		}
	}
	
	[Table(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomerId;
		
		private System.Guid _AccountIdFk;
		
		private System.Guid _ContactIdFk;
		
		private string _UserName;
		
		private System.Nullable<System.DateTime> _LastActivity;
		
		private System.Nullable<bool> _IsEnabled;
		
		private System.Nullable<decimal> _TimezoneOffset;
		
		private EntitySet<CustomerFriend> _CustomerFriends1;
		
		private EntitySet<Feedback> _Feedbacks;
		
		private EntitySet<FeedbackFlag> _FeedbackFlags;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntitySet<Vote> _Votes;
		
		private EntitySet<WishList> _WishLists;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(System.Guid value);
    partial void OnCustomerIdChanged();
    partial void OnAccountIdFkChanging(System.Guid value);
    partial void OnAccountIdFkChanged();
    partial void OnContactIdFkChanging(System.Guid value);
    partial void OnContactIdFkChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLastActivityChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivityChanged();
    partial void OnIsEnabledChanging(System.Nullable<bool> value);
    partial void OnIsEnabledChanged();
    partial void OnTimezoneOffsetChanging(System.Nullable<decimal> value);
    partial void OnTimezoneOffsetChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerFriends1 = new EntitySet<CustomerFriend>(new Action<CustomerFriend>(this.attach_CustomerFriends1), new Action<CustomerFriend>(this.detach_CustomerFriends1));
			this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
			this._FeedbackFlags = new EntitySet<FeedbackFlag>(new Action<FeedbackFlag>(this.attach_FeedbackFlags), new Action<FeedbackFlag>(this.detach_FeedbackFlags));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._Votes = new EntitySet<Vote>(new Action<Vote>(this.attach_Votes), new Action<Vote>(this.detach_Votes));
			this._WishLists = new EntitySet<WishList>(new Action<WishList>(this.attach_WishLists), new Action<WishList>(this.detach_WishLists));
			this._Account = default(EntityRef<Account>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccountIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountIdFk
		{
			get
			{
				return this._AccountIdFk;
			}
			set
			{
				if ((this._AccountIdFk != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdFkChanging(value);
					this.SendPropertyChanging();
					this._AccountIdFk = value;
					this.SendPropertyChanged("AccountIdFk");
					this.OnAccountIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_ContactIdFk", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContactIdFk
		{
			get
			{
				return this._ContactIdFk;
			}
			set
			{
				if ((this._ContactIdFk != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdFkChanging(value);
					this.SendPropertyChanging();
					this._ContactIdFk = value;
					this.SendPropertyChanged("ContactIdFk");
					this.OnContactIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivity", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivity
		{
			get
			{
				return this._LastActivity;
			}
			set
			{
				if ((this._LastActivity != value))
				{
					this.OnLastActivityChanging(value);
					this.SendPropertyChanging();
					this._LastActivity = value;
					this.SendPropertyChanged("LastActivity");
					this.OnLastActivityChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit")]
		public System.Nullable<bool> IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_TimezoneOffset", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TimezoneOffset
		{
			get
			{
				return this._TimezoneOffset;
			}
			set
			{
				if ((this._TimezoneOffset != value))
				{
					this.OnTimezoneOffsetChanging(value);
					this.SendPropertyChanging();
					this._TimezoneOffset = value;
					this.SendPropertyChanged("TimezoneOffset");
					this.OnTimezoneOffsetChanged();
				}
			}
		}
		
		[Association(Name="Customer_CustomerFriend", Storage="_CustomerFriends1", OtherKey="FriendIdFk")]
		public EntitySet<CustomerFriend> Friends
		{
			get
			{
				return this._CustomerFriends1;
			}
			set
			{
				this._CustomerFriends1.Assign(value);
			}
		}
		
		[Association(Name="Customer_Feedback", Storage="_Feedbacks", OtherKey="CustomerIdFk")]
		public EntitySet<Feedback> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		[Association(Name="Customer_FeedbackFlag", Storage="_FeedbackFlags", OtherKey="CustomerIdFk")]
		public EntitySet<FeedbackFlag> FeedbackFlags
		{
			get
			{
				return this._FeedbackFlags;
			}
			set
			{
				this._FeedbackFlags.Assign(value);
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Orders", OtherKey="CustomerIdFk")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Customer_ProductReview", Storage="_ProductReviews", OtherKey="CustomerIdFk")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[Association(Name="Customer_Vote", Storage="_Votes", OtherKey="CustomerIdFk")]
		public EntitySet<Vote> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				this._Votes.Assign(value);
			}
		}
		
		[Association(Name="Customer_WishList", Storage="_WishLists", OtherKey="CustomerIdFk")]
		public EntitySet<WishList> WishLists
		{
			get
			{
				return this._WishLists;
			}
			set
			{
				this._WishLists.Assign(value);
			}
		}
		
		[Association(Name="Account_Customer", Storage="_Account", ThisKey="AccountIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._AccountIdFk = value.AccountId;
					}
					else
					{
						this._AccountIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[Association(Name="Contact_Customer", Storage="_Contact", ThisKey="ContactIdFk", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._ContactIdFk = value.ContactId;
					}
					else
					{
						this._ContactIdFk = default(System.Guid);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerFriends1(CustomerFriend entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = this;
		}
		
		private void detach_CustomerFriends1(CustomerFriend entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = null;
		}
		
		private void attach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_FeedbackFlags(FeedbackFlag entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_FeedbackFlags(FeedbackFlag entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_WishLists(WishList entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_WishLists(WishList entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContactId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Title;
		
		private string _Company;
		
		private string _EmailAddress;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Manufacturer> _Manufacturers;
		
		private EntitySet<Phone> _Phones;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIdChanging(System.Guid value);
    partial void OnContactIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    #endregion
		
		public Contact()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Manufacturers = new EntitySet<Manufacturer>(new Action<Manufacturer>(this.attach_Manufacturers), new Action<Manufacturer>(this.detach_Manufacturers));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[Column(Storage="_ContactId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="NVarChar(MAX)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(MAX)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Association(Name="Contact_Address", Storage="_Addresses", OtherKey="ContactIdFk")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[Association(Name="Contact_Manufacturer", Storage="_Manufacturers", OtherKey="ContactIdFk")]
		public EntitySet<Manufacturer> Manufacturers
		{
			get
			{
				return this._Manufacturers;
			}
			set
			{
				this._Manufacturers.Assign(value);
			}
		}
		
		[Association(Name="Contact_Phone", Storage="_Phones", OtherKey="ContactIdFk")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[Association(Name="Contact_Customer", Storage="_Customers", OtherKey="ContactIdFk")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Manufacturers(Manufacturer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Manufacturers(Manufacturer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[Table(Name="dbo.Media")]
	public partial class Media : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MediaId;
		
		private string _Name;
		
		private string _Path;
		
		private System.Nullable<byte> _Type;
		
		private System.Nullable<int> _Size;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _Height;
		
		private string _FileExtension;
		
		private EntitySet<ProductMedia> _ProductMedias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaIdChanging(System.Guid value);
    partial void OnMediaIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnTypeChanging(System.Nullable<byte> value);
    partial void OnTypeChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnFileExtensionChanging(string value);
    partial void OnFileExtensionChanged();
    #endregion
		
		public Media()
		{
			this._ProductMedias = new EntitySet<ProductMedia>(new Action<ProductMedia>(this.attach_ProductMedias), new Action<ProductMedia>(this.detach_ProductMedias));
			OnCreated();
		}
		
		[Column(Storage="_MediaId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MediaId
		{
			get
			{
				return this._MediaId;
			}
			set
			{
				if ((this._MediaId != value))
				{
					this.OnMediaIdChanging(value);
					this.SendPropertyChanging();
					this._MediaId = value;
					this.SendPropertyChanged("MediaId");
					this.OnMediaIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(MAX)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt")]
		public System.Nullable<byte> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_FileExtension", DbType="NVarChar(50)")]
		public string FileExtension
		{
			get
			{
				return this._FileExtension;
			}
			set
			{
				if ((this._FileExtension != value))
				{
					this.OnFileExtensionChanging(value);
					this.SendPropertyChanging();
					this._FileExtension = value;
					this.SendPropertyChanged("FileExtension");
					this.OnFileExtensionChanged();
				}
			}
		}
		
		[Association(Name="Media_ProductMedia", Storage="_ProductMedias", OtherKey="MediaIdFk")]
		public EntitySet<ProductMedia> ProductMedias
		{
			get
			{
				return this._ProductMedias;
			}
			set
			{
				this._ProductMedias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductMedias(ProductMedia entity)
		{
			this.SendPropertyChanging();
			entity.Media = this;
		}
		
		private void detach_ProductMedias(ProductMedia entity)
		{
			this.SendPropertyChanging();
			entity.Media = null;
		}
	}
}
#pragma warning restore 1591
